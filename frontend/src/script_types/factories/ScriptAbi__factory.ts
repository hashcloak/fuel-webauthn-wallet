/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.44.1
  Forc version: 0.35.5
  Fuel-Core version: 0.17.3
*/

import {
  Account,
  BigNumberish,
  BN,
  Script,
} from 'fuels';

export type AffinePointInput = { x: FieldElementInput, y: FieldElementInput, infinity: BigNumberish };
export type AffinePointOutput = { x: FieldElementOutput, y: FieldElementOutput, infinity: number };
export type FieldElementInput = { ls: [BigNumberish, BigNumberish, BigNumberish, BigNumberish] };
export type FieldElementOutput = { ls: [BN, BN, BN, BN] };
export type PublicKeyInput = { point: AffinePointInput };
export type PublicKeyOutput = { point: AffinePointOutput };
export type ScalarInput = { ls: [BigNumberish, BigNumberish, BigNumberish, BigNumberish] };
export type ScalarOutput = { ls: [BN, BN, BN, BN] };
export type SignatureInput = { r: ScalarInput, s: ScalarInput };
export type SignatureOutput = { r: ScalarOutput, s: ScalarOutput };

type ScriptAbiInputs = [pubkey: PublicKeyInput, sign: SignatureInput, msg: string];
type ScriptAbiOutput = number;

const _abi = {
  "types": [
    {
      "typeId": 0,
      "type": "[_; 4]",
      "components": [
        {
          "name": "__array_element",
          "type": 7,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "struct AffinePoint",
      "components": [
        {
          "name": "x",
          "type": 3,
          "typeArguments": null
        },
        {
          "name": "y",
          "type": 3,
          "typeArguments": null
        },
        {
          "name": "infinity",
          "type": 8,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "struct FieldElement",
      "components": [
        {
          "name": "ls",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "struct PublicKey",
      "components": [
        {
          "name": "point",
          "type": 2,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "struct Scalar",
      "components": [
        {
          "name": "ls",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "struct Signature",
      "components": [
        {
          "name": "r",
          "type": 5,
          "typeArguments": null
        },
        {
          "name": "s",
          "type": 5,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "u64",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "u8",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "pubkey",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "sign",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "msg",
          "type": 1,
          "typeArguments": null
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 8,
        "typeArguments": null
      },
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": 0,
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": null
      }
    },
    {
      "logId": 1,
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": null
      }
    },
    {
      "logId": 2,
      "loggedType": {
        "name": "",
        "type": 1,
        "typeArguments": null
      }
    },
    {
      "logId": 3,
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": null
      }
    }
  ],
  "messagesTypes": [],
  "configurables": []
}

const _bin = '0x900000044700000000000000000000e45dfcc00110fff3006140000c50590000504d0048504900881a445000910000d8724000081b400400104164005d41000033400000724000081b401400104164005d410000334010005d53f00872400020340144905d53f0095d43f00a33510000505510307240004828556400505150487240004028513400504d508872400020284d24005d4bf00f104923007240002028452400504910205d43f00b5f490000504110285f4150005d4bf010104923005d43f00c2d4404901a40d000734000365d43f00d244000005d43f00e2440000047000000c433fa483a6b91c1e48f84c648ee00b0bf469a38ed65c1cad595842ea3b0bf6800000000000000000000000000000000000000000000000000000000000000000000000000000002e669622e60f29fb60000000000000003000000009ee5b619000000001dcd65000000000000000015000000000000002a00000000000000e40000000000000104'

export class ScriptAbi__factory {

  static readonly abi = _abi
  static readonly bin = _bin

  static createInstance(wallet: Account) {

    const { abi, bin } = ScriptAbi__factory

    const script = new Script<
      ScriptAbiInputs,
      ScriptAbiOutput
    >(bin, abi, wallet);

    return script;

  }

}
